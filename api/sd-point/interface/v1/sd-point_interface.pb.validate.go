// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/sd-point/interface/v1/sd-point_interface.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreatePointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePointRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePointRequestMultiError, or nil if none found.
func (m *CreatePointRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePointRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePointRequestValidationError{
					field:  "Point",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePointRequestValidationError{
					field:  "Point",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePointRequestValidationError{
				field:  "Point",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePointRequestMultiError(errors)
	}

	return nil
}

// CreatePointRequestMultiError is an error wrapping multiple validation errors
// returned by CreatePointRequest.ValidateAll() if the designated constraints
// aren't met.
type CreatePointRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePointRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePointRequestMultiError) AllErrors() []error { return m }

// CreatePointRequestValidationError is the validation error returned by
// CreatePointRequest.Validate if the designated constraints aren't met.
type CreatePointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePointRequestValidationError) ErrorName() string {
	return "CreatePointRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePointRequestValidationError{}

// Validate checks the field values on UpdatePointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePointRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePointRequestMultiError, or nil if none found.
func (m *UpdatePointRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePointRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePointRequestValidationError{
					field:  "Point",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePointRequestValidationError{
					field:  "Point",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePointRequestValidationError{
				field:  "Point",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePointRequestMultiError(errors)
	}

	return nil
}

// UpdatePointRequestMultiError is an error wrapping multiple validation errors
// returned by UpdatePointRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdatePointRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePointRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePointRequestMultiError) AllErrors() []error { return m }

// UpdatePointRequestValidationError is the validation error returned by
// UpdatePointRequest.Validate if the designated constraints aren't met.
type UpdatePointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePointRequestValidationError) ErrorName() string {
	return "UpdatePointRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePointRequestValidationError{}

// Validate checks the field values on DeletePointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePointRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePointRequestMultiError, or nil if none found.
func (m *DeletePointRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePointRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pid

	if len(errors) > 0 {
		return DeletePointRequestMultiError(errors)
	}

	return nil
}

// DeletePointRequestMultiError is an error wrapping multiple validation errors
// returned by DeletePointRequest.ValidateAll() if the designated constraints
// aren't met.
type DeletePointRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePointRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePointRequestMultiError) AllErrors() []error { return m }

// DeletePointRequestValidationError is the validation error returned by
// DeletePointRequest.Validate if the designated constraints aren't met.
type DeletePointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePointRequestValidationError) ErrorName() string {
	return "DeletePointRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePointRequestValidationError{}

// Validate checks the field values on GetPointRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPointRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPointRequestMultiError, or nil if none found.
func (m *GetPointRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPointRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pid

	if len(errors) > 0 {
		return GetPointRequestMultiError(errors)
	}

	return nil
}

// GetPointRequestMultiError is an error wrapping multiple validation errors
// returned by GetPointRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPointRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPointRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPointRequestMultiError) AllErrors() []error { return m }

// GetPointRequestValidationError is the validation error returned by
// GetPointRequest.Validate if the designated constraints aren't met.
type GetPointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPointRequestValidationError) ErrorName() string { return "GetPointRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPointRequestValidationError{}

// Validate checks the field values on GetPointReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPointReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPointReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetPointReplyMultiError, or
// nil if none found.
func (m *GetPointReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPointReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPointReplyValidationError{
					field:  "Point",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPointReplyValidationError{
					field:  "Point",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPointReplyValidationError{
				field:  "Point",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPointReplyMultiError(errors)
	}

	return nil
}

// GetPointReplyMultiError is an error wrapping multiple validation errors
// returned by GetPointReply.ValidateAll() if the designated constraints
// aren't met.
type GetPointReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPointReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPointReplyMultiError) AllErrors() []error { return m }

// GetPointReplyValidationError is the validation error returned by
// GetPointReply.Validate if the designated constraints aren't met.
type GetPointReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPointReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPointReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPointReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPointReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPointReplyValidationError) ErrorName() string { return "GetPointReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetPointReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPointReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPointReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPointReplyValidationError{}

// Validate checks the field values on ListPointRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPointRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPointRequestMultiError, or nil if none found.
func (m *ListPointRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPointRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Begin

	// no validation rules for Count

	if len(errors) > 0 {
		return ListPointRequestMultiError(errors)
	}

	return nil
}

// ListPointRequestMultiError is an error wrapping multiple validation errors
// returned by ListPointRequest.ValidateAll() if the designated constraints
// aren't met.
type ListPointRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPointRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPointRequestMultiError) AllErrors() []error { return m }

// ListPointRequestValidationError is the validation error returned by
// ListPointRequest.Validate if the designated constraints aren't met.
type ListPointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPointRequestValidationError) ErrorName() string { return "ListPointRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListPointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPointRequestValidationError{}

// Validate checks the field values on ListPointReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListPointReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPointReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListPointReplyMultiError,
// or nil if none found.
func (m *ListPointReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPointReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Finished

	// no validation rules for Count

	for idx, item := range m.GetPoints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPointReplyValidationError{
						field:  fmt.Sprintf("Points[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPointReplyValidationError{
						field:  fmt.Sprintf("Points[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPointReplyValidationError{
					field:  fmt.Sprintf("Points[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPointReplyMultiError(errors)
	}

	return nil
}

// ListPointReplyMultiError is an error wrapping multiple validation errors
// returned by ListPointReply.ValidateAll() if the designated constraints
// aren't met.
type ListPointReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPointReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPointReplyMultiError) AllErrors() []error { return m }

// ListPointReplyValidationError is the validation error returned by
// ListPointReply.Validate if the designated constraints aren't met.
type ListPointReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPointReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPointReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPointReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPointReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPointReplyValidationError) ErrorName() string { return "ListPointReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListPointReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPointReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPointReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPointReplyValidationError{}

// Validate checks the field values on Record with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Record) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Record with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RecordMultiError, or nil if none found.
func (m *Record) ValidateAll() error {
	return m.validate(true)
}

func (m *Record) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rid

	// no validation rules for Pid

	if val := m.GetNum(); val < -65536 || val > 65535 {
		err := RecordValidationError{
			field:  "Num",
			reason: "value must be inside range [-65536, 65535]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ClickedAt

	if utf8.RuneCountInString(m.GetDesc()) > 1024 {
		err := RecordValidationError{
			field:  "Desc",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return RecordMultiError(errors)
	}

	return nil
}

// RecordMultiError is an error wrapping multiple validation errors returned by
// Record.ValidateAll() if the designated constraints aren't met.
type RecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordMultiError) AllErrors() []error { return m }

// RecordValidationError is the validation error returned by Record.Validate if
// the designated constraints aren't met.
type RecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordValidationError) ErrorName() string { return "RecordValidationError" }

// Error satisfies the builtin error interface
func (e RecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordValidationError{}

// Validate checks the field values on CreateRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRecordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRecordRequestMultiError, or nil if none found.
func (m *CreateRecordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRecordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRecord() == nil {
		err := CreateRecordRequestValidationError{
			field:  "Record",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRecord()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRecordRequestValidationError{
					field:  "Record",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRecordRequestValidationError{
					field:  "Record",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecord()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRecordRequestValidationError{
				field:  "Record",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRecordRequestMultiError(errors)
	}

	return nil
}

// CreateRecordRequestMultiError is an error wrapping multiple validation
// errors returned by CreateRecordRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateRecordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRecordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRecordRequestMultiError) AllErrors() []error { return m }

// CreateRecordRequestValidationError is the validation error returned by
// CreateRecordRequest.Validate if the designated constraints aren't met.
type CreateRecordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRecordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRecordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRecordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRecordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRecordRequestValidationError) ErrorName() string {
	return "CreateRecordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRecordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRecordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRecordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRecordRequestValidationError{}

// Validate checks the field values on DeleteRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRecordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRecordRequestMultiError, or nil if none found.
func (m *DeleteRecordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRecordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rid

	if len(errors) > 0 {
		return DeleteRecordRequestMultiError(errors)
	}

	return nil
}

// DeleteRecordRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteRecordRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteRecordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRecordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRecordRequestMultiError) AllErrors() []error { return m }

// DeleteRecordRequestValidationError is the validation error returned by
// DeleteRecordRequest.Validate if the designated constraints aren't met.
type DeleteRecordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRecordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRecordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRecordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRecordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRecordRequestValidationError) ErrorName() string {
	return "DeleteRecordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRecordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRecordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRecordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRecordRequestValidationError{}

// Validate checks the field values on UpdateRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRecordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRecordRequestMultiError, or nil if none found.
func (m *UpdateRecordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRecordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRecord() == nil {
		err := UpdateRecordRequestValidationError{
			field:  "Record",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRecord()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRecordRequestValidationError{
					field:  "Record",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRecordRequestValidationError{
					field:  "Record",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecord()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRecordRequestValidationError{
				field:  "Record",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRecordRequestMultiError(errors)
	}

	return nil
}

// UpdateRecordRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateRecordRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateRecordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRecordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRecordRequestMultiError) AllErrors() []error { return m }

// UpdateRecordRequestValidationError is the validation error returned by
// UpdateRecordRequest.Validate if the designated constraints aren't met.
type UpdateRecordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRecordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRecordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRecordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRecordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRecordRequestValidationError) ErrorName() string {
	return "UpdateRecordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRecordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRecordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRecordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRecordRequestValidationError{}

// Validate checks the field values on CountRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountRecordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountRecordRequestMultiError, or nil if none found.
func (m *CountRecordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CountRecordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MinClickedAt

	// no validation rules for MaxClickedAt

	if len(errors) > 0 {
		return CountRecordRequestMultiError(errors)
	}

	return nil
}

// CountRecordRequestMultiError is an error wrapping multiple validation errors
// returned by CountRecordRequest.ValidateAll() if the designated constraints
// aren't met.
type CountRecordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountRecordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountRecordRequestMultiError) AllErrors() []error { return m }

// CountRecordRequestValidationError is the validation error returned by
// CountRecordRequest.Validate if the designated constraints aren't met.
type CountRecordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountRecordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountRecordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountRecordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountRecordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountRecordRequestValidationError) ErrorName() string {
	return "CountRecordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CountRecordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountRecordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountRecordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountRecordRequestValidationError{}

// Validate checks the field values on CountRecordReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CountRecordReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountRecordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountRecordReplyMultiError, or nil if none found.
func (m *CountRecordReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CountRecordReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return CountRecordReplyMultiError(errors)
	}

	return nil
}

// CountRecordReplyMultiError is an error wrapping multiple validation errors
// returned by CountRecordReply.ValidateAll() if the designated constraints
// aren't met.
type CountRecordReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountRecordReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountRecordReplyMultiError) AllErrors() []error { return m }

// CountRecordReplyValidationError is the validation error returned by
// CountRecordReply.Validate if the designated constraints aren't met.
type CountRecordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountRecordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountRecordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountRecordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountRecordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountRecordReplyValidationError) ErrorName() string { return "CountRecordReplyValidationError" }

// Error satisfies the builtin error interface
func (e CountRecordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountRecordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountRecordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountRecordReplyValidationError{}

// Validate checks the field values on ListRecordRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRecordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRecordRequestMultiError, or nil if none found.
func (m *ListRecordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRecordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Begin

	// no validation rules for Count

	// no validation rules for MinClickedAt

	// no validation rules for MaxClickedAt

	if len(errors) > 0 {
		return ListRecordRequestMultiError(errors)
	}

	return nil
}

// ListRecordRequestMultiError is an error wrapping multiple validation errors
// returned by ListRecordRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRecordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRecordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRecordRequestMultiError) AllErrors() []error { return m }

// ListRecordRequestValidationError is the validation error returned by
// ListRecordRequest.Validate if the designated constraints aren't met.
type ListRecordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRecordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRecordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRecordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRecordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRecordRequestValidationError) ErrorName() string {
	return "ListRecordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRecordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRecordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRecordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRecordRequestValidationError{}

// Validate checks the field values on ListRecordReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRecordReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRecordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRecordReplyMultiError, or nil if none found.
func (m *ListRecordReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRecordReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Finished

	// no validation rules for Count

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRecordReplyValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRecordReplyValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRecordReplyValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRecordReplyMultiError(errors)
	}

	return nil
}

// ListRecordReplyMultiError is an error wrapping multiple validation errors
// returned by ListRecordReply.ValidateAll() if the designated constraints
// aren't met.
type ListRecordReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRecordReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRecordReplyMultiError) AllErrors() []error { return m }

// ListRecordReplyValidationError is the validation error returned by
// ListRecordReply.Validate if the designated constraints aren't met.
type ListRecordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRecordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRecordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRecordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRecordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRecordReplyValidationError) ErrorName() string { return "ListRecordReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListRecordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRecordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRecordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRecordReplyValidationError{}

// Validate checks the field values on GetPublicKeyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPublicKeyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublicKeyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPublicKeyReplyMultiError, or nil if none found.
func (m *GetPublicKeyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublicKeyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublicKey

	if len(errors) > 0 {
		return GetPublicKeyReplyMultiError(errors)
	}

	return nil
}

// GetPublicKeyReplyMultiError is an error wrapping multiple validation errors
// returned by GetPublicKeyReply.ValidateAll() if the designated constraints
// aren't met.
type GetPublicKeyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublicKeyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublicKeyReplyMultiError) AllErrors() []error { return m }

// GetPublicKeyReplyValidationError is the validation error returned by
// GetPublicKeyReply.Validate if the designated constraints aren't met.
type GetPublicKeyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublicKeyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublicKeyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublicKeyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublicKeyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublicKeyReplyValidationError) ErrorName() string {
	return "GetPublicKeyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublicKeyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublicKeyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublicKeyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublicKeyReplyValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LoginType

	if all {
		switch v := interface{}(m.GetOriginAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginRequestValidationError{
					field:  "OriginAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginRequestValidationError{
					field:  "OriginAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOriginAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginRequestValidationError{
				field:  "OriginAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWechatAccountCode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginRequestValidationError{
					field:  "WechatAccountCode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginRequestValidationError{
					field:  "WechatAccountCode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWechatAccountCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginRequestValidationError{
				field:  "WechatAccountCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReplyMultiError, or
// nil if none found.
func (m *LoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	if len(errors) > 0 {
		return LoginReplyMultiError(errors)
	}

	return nil
}

// LoginReplyMultiError is an error wrapping multiple validation errors
// returned by LoginReply.ValidateAll() if the designated constraints aren't met.
type LoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReplyMultiError) AllErrors() []error { return m }

// LoginReplyValidationError is the validation error returned by
// LoginReply.Validate if the designated constraints aren't met.
type LoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReplyValidationError) ErrorName() string { return "LoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReplyValidationError{}

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRegisterType() > 1 {
		err := RegisterRequestValidationError{
			field:  "RegisterType",
			reason: "value must be less than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOriginAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterRequestValidationError{
					field:  "OriginAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterRequestValidationError{
					field:  "OriginAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOriginAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterRequestValidationError{
				field:  "OriginAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWechatAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterRequestValidationError{
					field:  "WechatAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterRequestValidationError{
					field:  "WechatAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWechatAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterRequestValidationError{
				field:  "WechatAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

// Validate checks the field values on RegisterReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegisterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegisterReplyMultiError, or
// nil if none found.
func (m *RegisterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return RegisterReplyMultiError(errors)
	}

	return nil
}

// RegisterReplyMultiError is an error wrapping multiple validation errors
// returned by RegisterReply.ValidateAll() if the designated constraints
// aren't met.
type RegisterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterReplyMultiError) AllErrors() []error { return m }

// RegisterReplyValidationError is the validation error returned by
// RegisterReply.Validate if the designated constraints aren't met.
type RegisterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterReplyValidationError) ErrorName() string { return "RegisterReplyValidationError" }

// Error satisfies the builtin error interface
func (e RegisterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterReplyValidationError{}

// Validate checks the field values on BindAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BindAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BindAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BindAccountRequestMultiError, or nil if none found.
func (m *BindAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BindAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _BindAccountRequest_BindType_InLookup[m.GetBindType()]; !ok {
		err := BindAccountRequestValidationError{
			field:  "BindType",
			reason: "value must be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetWechatAccountCode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BindAccountRequestValidationError{
					field:  "WechatAccountCode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BindAccountRequestValidationError{
					field:  "WechatAccountCode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWechatAccountCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BindAccountRequestValidationError{
				field:  "WechatAccountCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BindAccountRequestMultiError(errors)
	}

	return nil
}

// BindAccountRequestMultiError is an error wrapping multiple validation errors
// returned by BindAccountRequest.ValidateAll() if the designated constraints
// aren't met.
type BindAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BindAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BindAccountRequestMultiError) AllErrors() []error { return m }

// BindAccountRequestValidationError is the validation error returned by
// BindAccountRequest.Validate if the designated constraints aren't met.
type BindAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindAccountRequestValidationError) ErrorName() string {
	return "BindAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BindAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindAccountRequestValidationError{}

var _BindAccountRequest_BindType_InLookup = map[uint32]struct{}{
	0: {},
}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserReplyMultiError, or
// nil if none found.
func (m *GetUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserReplyMultiError(errors)
	}

	return nil
}

// GetUserReplyMultiError is an error wrapping multiple validation errors
// returned by GetUserReply.ValidateAll() if the designated constraints aren't met.
type GetUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReplyMultiError) AllErrors() []error { return m }

// GetUserReplyValidationError is the validation error returned by
// GetUserReply.Validate if the designated constraints aren't met.
type GetUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReplyValidationError) ErrorName() string { return "GetUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReplyValidationError{}

// Validate checks the field values on ListUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserRequestMultiError, or nil if none found.
func (m *ListUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListUserRequestMultiError(errors)
	}

	return nil
}

// ListUserRequestMultiError is an error wrapping multiple validation errors
// returned by ListUserRequest.ValidateAll() if the designated constraints
// aren't met.
type ListUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserRequestMultiError) AllErrors() []error { return m }

// ListUserRequestValidationError is the validation error returned by
// ListUserRequest.Validate if the designated constraints aren't met.
type ListUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRequestValidationError) ErrorName() string { return "ListUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRequestValidationError{}

// Validate checks the field values on ListUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListUserReplyMultiError, or
// nil if none found.
func (m *ListUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserReplyMultiError(errors)
	}

	return nil
}

// ListUserReplyMultiError is an error wrapping multiple validation errors
// returned by ListUserReply.ValidateAll() if the designated constraints
// aren't met.
type ListUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserReplyMultiError) AllErrors() []error { return m }

// ListUserReplyValidationError is the validation error returned by
// ListUserReply.Validate if the designated constraints aren't met.
type ListUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReplyValidationError) ErrorName() string { return "ListUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReplyValidationError{}

// Validate checks the field values on GetPointReply_Point with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPointReply_Point) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPointReply_Point with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPointReply_PointMultiError, or nil if none found.
func (m *GetPointReply_Point) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPointReply_Point) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pid

	// no validation rules for Total

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 32 {
		err := GetPointReply_PointValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDesc()) > 1024 {
		err := GetPointReply_PointValidationError{
			field:  "Desc",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return GetPointReply_PointMultiError(errors)
	}

	return nil
}

// GetPointReply_PointMultiError is an error wrapping multiple validation
// errors returned by GetPointReply_Point.ValidateAll() if the designated
// constraints aren't met.
type GetPointReply_PointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPointReply_PointMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPointReply_PointMultiError) AllErrors() []error { return m }

// GetPointReply_PointValidationError is the validation error returned by
// GetPointReply_Point.Validate if the designated constraints aren't met.
type GetPointReply_PointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPointReply_PointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPointReply_PointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPointReply_PointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPointReply_PointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPointReply_PointValidationError) ErrorName() string {
	return "GetPointReply_PointValidationError"
}

// Error satisfies the builtin error interface
func (e GetPointReply_PointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPointReply_Point.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPointReply_PointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPointReply_PointValidationError{}

// Validate checks the field values on LoginRequest_OriginalAccount with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginRequest_OriginalAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest_OriginalAccount with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginRequest_OriginalAccountMultiError, or nil if none found.
func (m *LoginRequest_OriginalAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest_OriginalAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 8 || l > 64 {
		err := LoginRequest_OriginalAccountValidationError{
			field:  "Account",
			reason: "value length must be between 8 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := LoginRequest_OriginalAccountValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginRequest_OriginalAccountMultiError(errors)
	}

	return nil
}

// LoginRequest_OriginalAccountMultiError is an error wrapping multiple
// validation errors returned by LoginRequest_OriginalAccount.ValidateAll() if
// the designated constraints aren't met.
type LoginRequest_OriginalAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequest_OriginalAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequest_OriginalAccountMultiError) AllErrors() []error { return m }

// LoginRequest_OriginalAccountValidationError is the validation error returned
// by LoginRequest_OriginalAccount.Validate if the designated constraints
// aren't met.
type LoginRequest_OriginalAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequest_OriginalAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequest_OriginalAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequest_OriginalAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequest_OriginalAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequest_OriginalAccountValidationError) ErrorName() string {
	return "LoginRequest_OriginalAccountValidationError"
}

// Error satisfies the builtin error interface
func (e LoginRequest_OriginalAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest_OriginalAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequest_OriginalAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequest_OriginalAccountValidationError{}

// Validate checks the field values on LoginRequest_WechatAccountCode with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginRequest_WechatAccountCode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest_WechatAccountCode with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// LoginRequest_WechatAccountCodeMultiError, or nil if none found.
func (m *LoginRequest_WechatAccountCode) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest_WechatAccountCode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOpenidCode()) != 32 {
		err := LoginRequest_WechatAccountCodeValidationError{
			field:  "OpenidCode",
			reason: "value length must be 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetPhoneNumberCode()) != 32 {
		err := LoginRequest_WechatAccountCodeValidationError{
			field:  "PhoneNumberCode",
			reason: "value length must be 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return LoginRequest_WechatAccountCodeMultiError(errors)
	}

	return nil
}

// LoginRequest_WechatAccountCodeMultiError is an error wrapping multiple
// validation errors returned by LoginRequest_WechatAccountCode.ValidateAll()
// if the designated constraints aren't met.
type LoginRequest_WechatAccountCodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequest_WechatAccountCodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequest_WechatAccountCodeMultiError) AllErrors() []error { return m }

// LoginRequest_WechatAccountCodeValidationError is the validation error
// returned by LoginRequest_WechatAccountCode.Validate if the designated
// constraints aren't met.
type LoginRequest_WechatAccountCodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequest_WechatAccountCodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequest_WechatAccountCodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequest_WechatAccountCodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequest_WechatAccountCodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequest_WechatAccountCodeValidationError) ErrorName() string {
	return "LoginRequest_WechatAccountCodeValidationError"
}

// Error satisfies the builtin error interface
func (e LoginRequest_WechatAccountCodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest_WechatAccountCode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequest_WechatAccountCodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequest_WechatAccountCodeValidationError{}

// Validate checks the field values on GetUserReply_User with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserReply_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReply_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserReply_UserMultiError, or nil if none found.
func (m *GetUserReply_User) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReply_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Username

	if len(errors) > 0 {
		return GetUserReply_UserMultiError(errors)
	}

	return nil
}

// GetUserReply_UserMultiError is an error wrapping multiple validation errors
// returned by GetUserReply_User.ValidateAll() if the designated constraints
// aren't met.
type GetUserReply_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReply_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReply_UserMultiError) AllErrors() []error { return m }

// GetUserReply_UserValidationError is the validation error returned by
// GetUserReply_User.Validate if the designated constraints aren't met.
type GetUserReply_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReply_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReply_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReply_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReply_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReply_UserValidationError) ErrorName() string {
	return "GetUserReply_UserValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserReply_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReply_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReply_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReply_UserValidationError{}
