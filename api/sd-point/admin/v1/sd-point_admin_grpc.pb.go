// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: sd-point/admin/v1/sd-point_admin.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SdPointAdminClient is the client API for SdPointAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SdPointAdminClient interface {
	CreateSdPointAdmin(ctx context.Context, in *CreateSdPointAdminRequest, opts ...grpc.CallOption) (*CreateSdPointAdminReply, error)
	UpdateSdPointAdmin(ctx context.Context, in *UpdateSdPointAdminRequest, opts ...grpc.CallOption) (*UpdateSdPointAdminReply, error)
	DeleteSdPointAdmin(ctx context.Context, in *DeleteSdPointAdminRequest, opts ...grpc.CallOption) (*DeleteSdPointAdminReply, error)
	GetSdPointAdmin(ctx context.Context, in *GetSdPointAdminRequest, opts ...grpc.CallOption) (*GetSdPointAdminReply, error)
	ListSdPointAdmin(ctx context.Context, in *ListSdPointAdminRequest, opts ...grpc.CallOption) (*ListSdPointAdminReply, error)
}

type sdPointAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewSdPointAdminClient(cc grpc.ClientConnInterface) SdPointAdminClient {
	return &sdPointAdminClient{cc}
}

func (c *sdPointAdminClient) CreateSdPointAdmin(ctx context.Context, in *CreateSdPointAdminRequest, opts ...grpc.CallOption) (*CreateSdPointAdminReply, error) {
	out := new(CreateSdPointAdminReply)
	err := c.cc.Invoke(ctx, "/api.sd_point.admin.v1.SdPointAdmin/CreateSdPointAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdPointAdminClient) UpdateSdPointAdmin(ctx context.Context, in *UpdateSdPointAdminRequest, opts ...grpc.CallOption) (*UpdateSdPointAdminReply, error) {
	out := new(UpdateSdPointAdminReply)
	err := c.cc.Invoke(ctx, "/api.sd_point.admin.v1.SdPointAdmin/UpdateSdPointAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdPointAdminClient) DeleteSdPointAdmin(ctx context.Context, in *DeleteSdPointAdminRequest, opts ...grpc.CallOption) (*DeleteSdPointAdminReply, error) {
	out := new(DeleteSdPointAdminReply)
	err := c.cc.Invoke(ctx, "/api.sd_point.admin.v1.SdPointAdmin/DeleteSdPointAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdPointAdminClient) GetSdPointAdmin(ctx context.Context, in *GetSdPointAdminRequest, opts ...grpc.CallOption) (*GetSdPointAdminReply, error) {
	out := new(GetSdPointAdminReply)
	err := c.cc.Invoke(ctx, "/api.sd_point.admin.v1.SdPointAdmin/GetSdPointAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdPointAdminClient) ListSdPointAdmin(ctx context.Context, in *ListSdPointAdminRequest, opts ...grpc.CallOption) (*ListSdPointAdminReply, error) {
	out := new(ListSdPointAdminReply)
	err := c.cc.Invoke(ctx, "/api.sd_point.admin.v1.SdPointAdmin/ListSdPointAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SdPointAdminServer is the server API for SdPointAdmin service.
// All implementations must embed UnimplementedSdPointAdminServer
// for forward compatibility
type SdPointAdminServer interface {
	CreateSdPointAdmin(context.Context, *CreateSdPointAdminRequest) (*CreateSdPointAdminReply, error)
	UpdateSdPointAdmin(context.Context, *UpdateSdPointAdminRequest) (*UpdateSdPointAdminReply, error)
	DeleteSdPointAdmin(context.Context, *DeleteSdPointAdminRequest) (*DeleteSdPointAdminReply, error)
	GetSdPointAdmin(context.Context, *GetSdPointAdminRequest) (*GetSdPointAdminReply, error)
	ListSdPointAdmin(context.Context, *ListSdPointAdminRequest) (*ListSdPointAdminReply, error)
	mustEmbedUnimplementedSdPointAdminServer()
}

// UnimplementedSdPointAdminServer must be embedded to have forward compatible implementations.
type UnimplementedSdPointAdminServer struct {
}

func (UnimplementedSdPointAdminServer) CreateSdPointAdmin(context.Context, *CreateSdPointAdminRequest) (*CreateSdPointAdminReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSdPointAdmin not implemented")
}
func (UnimplementedSdPointAdminServer) UpdateSdPointAdmin(context.Context, *UpdateSdPointAdminRequest) (*UpdateSdPointAdminReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSdPointAdmin not implemented")
}
func (UnimplementedSdPointAdminServer) DeleteSdPointAdmin(context.Context, *DeleteSdPointAdminRequest) (*DeleteSdPointAdminReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSdPointAdmin not implemented")
}
func (UnimplementedSdPointAdminServer) GetSdPointAdmin(context.Context, *GetSdPointAdminRequest) (*GetSdPointAdminReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSdPointAdmin not implemented")
}
func (UnimplementedSdPointAdminServer) ListSdPointAdmin(context.Context, *ListSdPointAdminRequest) (*ListSdPointAdminReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSdPointAdmin not implemented")
}
func (UnimplementedSdPointAdminServer) mustEmbedUnimplementedSdPointAdminServer() {}

// UnsafeSdPointAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SdPointAdminServer will
// result in compilation errors.
type UnsafeSdPointAdminServer interface {
	mustEmbedUnimplementedSdPointAdminServer()
}

func RegisterSdPointAdminServer(s grpc.ServiceRegistrar, srv SdPointAdminServer) {
	s.RegisterService(&SdPointAdmin_ServiceDesc, srv)
}

func _SdPointAdmin_CreateSdPointAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSdPointAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdPointAdminServer).CreateSdPointAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sd_point.admin.v1.SdPointAdmin/CreateSdPointAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdPointAdminServer).CreateSdPointAdmin(ctx, req.(*CreateSdPointAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdPointAdmin_UpdateSdPointAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSdPointAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdPointAdminServer).UpdateSdPointAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sd_point.admin.v1.SdPointAdmin/UpdateSdPointAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdPointAdminServer).UpdateSdPointAdmin(ctx, req.(*UpdateSdPointAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdPointAdmin_DeleteSdPointAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSdPointAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdPointAdminServer).DeleteSdPointAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sd_point.admin.v1.SdPointAdmin/DeleteSdPointAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdPointAdminServer).DeleteSdPointAdmin(ctx, req.(*DeleteSdPointAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdPointAdmin_GetSdPointAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSdPointAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdPointAdminServer).GetSdPointAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sd_point.admin.v1.SdPointAdmin/GetSdPointAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdPointAdminServer).GetSdPointAdmin(ctx, req.(*GetSdPointAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdPointAdmin_ListSdPointAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSdPointAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdPointAdminServer).ListSdPointAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sd_point.admin.v1.SdPointAdmin/ListSdPointAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdPointAdminServer).ListSdPointAdmin(ctx, req.(*ListSdPointAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SdPointAdmin_ServiceDesc is the grpc.ServiceDesc for SdPointAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SdPointAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.sd_point.admin.v1.SdPointAdmin",
	HandlerType: (*SdPointAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSdPointAdmin",
			Handler:    _SdPointAdmin_CreateSdPointAdmin_Handler,
		},
		{
			MethodName: "UpdateSdPointAdmin",
			Handler:    _SdPointAdmin_UpdateSdPointAdmin_Handler,
		},
		{
			MethodName: "DeleteSdPointAdmin",
			Handler:    _SdPointAdmin_DeleteSdPointAdmin_Handler,
		},
		{
			MethodName: "GetSdPointAdmin",
			Handler:    _SdPointAdmin_GetSdPointAdmin_Handler,
		},
		{
			MethodName: "ListSdPointAdmin",
			Handler:    _SdPointAdmin_ListSdPointAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sd-point/admin/v1/sd-point_admin.proto",
}
