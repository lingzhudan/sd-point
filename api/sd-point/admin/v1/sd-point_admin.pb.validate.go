// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/sd-point/admin/v1/sd-point_admin.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateSdPointAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSdPointAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSdPointAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSdPointAdminRequestMultiError, or nil if none found.
func (m *CreateSdPointAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSdPointAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateSdPointAdminRequestMultiError(errors)
	}

	return nil
}

// CreateSdPointAdminRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSdPointAdminRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateSdPointAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSdPointAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSdPointAdminRequestMultiError) AllErrors() []error { return m }

// CreateSdPointAdminRequestValidationError is the validation error returned by
// CreateSdPointAdminRequest.Validate if the designated constraints aren't met.
type CreateSdPointAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSdPointAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSdPointAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSdPointAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSdPointAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSdPointAdminRequestValidationError) ErrorName() string {
	return "CreateSdPointAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSdPointAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSdPointAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSdPointAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSdPointAdminRequestValidationError{}

// Validate checks the field values on CreateSdPointAdminReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSdPointAdminReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSdPointAdminReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSdPointAdminReplyMultiError, or nil if none found.
func (m *CreateSdPointAdminReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSdPointAdminReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateSdPointAdminReplyMultiError(errors)
	}

	return nil
}

// CreateSdPointAdminReplyMultiError is an error wrapping multiple validation
// errors returned by CreateSdPointAdminReply.ValidateAll() if the designated
// constraints aren't met.
type CreateSdPointAdminReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSdPointAdminReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSdPointAdminReplyMultiError) AllErrors() []error { return m }

// CreateSdPointAdminReplyValidationError is the validation error returned by
// CreateSdPointAdminReply.Validate if the designated constraints aren't met.
type CreateSdPointAdminReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSdPointAdminReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSdPointAdminReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSdPointAdminReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSdPointAdminReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSdPointAdminReplyValidationError) ErrorName() string {
	return "CreateSdPointAdminReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSdPointAdminReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSdPointAdminReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSdPointAdminReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSdPointAdminReplyValidationError{}

// Validate checks the field values on UpdateSdPointAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSdPointAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSdPointAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSdPointAdminRequestMultiError, or nil if none found.
func (m *UpdateSdPointAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSdPointAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateSdPointAdminRequestMultiError(errors)
	}

	return nil
}

// UpdateSdPointAdminRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateSdPointAdminRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateSdPointAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSdPointAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSdPointAdminRequestMultiError) AllErrors() []error { return m }

// UpdateSdPointAdminRequestValidationError is the validation error returned by
// UpdateSdPointAdminRequest.Validate if the designated constraints aren't met.
type UpdateSdPointAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSdPointAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSdPointAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSdPointAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSdPointAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSdPointAdminRequestValidationError) ErrorName() string {
	return "UpdateSdPointAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSdPointAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSdPointAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSdPointAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSdPointAdminRequestValidationError{}

// Validate checks the field values on UpdateSdPointAdminReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSdPointAdminReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSdPointAdminReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSdPointAdminReplyMultiError, or nil if none found.
func (m *UpdateSdPointAdminReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSdPointAdminReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateSdPointAdminReplyMultiError(errors)
	}

	return nil
}

// UpdateSdPointAdminReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateSdPointAdminReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateSdPointAdminReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSdPointAdminReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSdPointAdminReplyMultiError) AllErrors() []error { return m }

// UpdateSdPointAdminReplyValidationError is the validation error returned by
// UpdateSdPointAdminReply.Validate if the designated constraints aren't met.
type UpdateSdPointAdminReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSdPointAdminReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSdPointAdminReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSdPointAdminReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSdPointAdminReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSdPointAdminReplyValidationError) ErrorName() string {
	return "UpdateSdPointAdminReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSdPointAdminReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSdPointAdminReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSdPointAdminReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSdPointAdminReplyValidationError{}

// Validate checks the field values on DeleteSdPointAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSdPointAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSdPointAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSdPointAdminRequestMultiError, or nil if none found.
func (m *DeleteSdPointAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSdPointAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSdPointAdminRequestMultiError(errors)
	}

	return nil
}

// DeleteSdPointAdminRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSdPointAdminRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteSdPointAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSdPointAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSdPointAdminRequestMultiError) AllErrors() []error { return m }

// DeleteSdPointAdminRequestValidationError is the validation error returned by
// DeleteSdPointAdminRequest.Validate if the designated constraints aren't met.
type DeleteSdPointAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSdPointAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSdPointAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSdPointAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSdPointAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSdPointAdminRequestValidationError) ErrorName() string {
	return "DeleteSdPointAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSdPointAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSdPointAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSdPointAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSdPointAdminRequestValidationError{}

// Validate checks the field values on DeleteSdPointAdminReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSdPointAdminReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSdPointAdminReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSdPointAdminReplyMultiError, or nil if none found.
func (m *DeleteSdPointAdminReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSdPointAdminReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSdPointAdminReplyMultiError(errors)
	}

	return nil
}

// DeleteSdPointAdminReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteSdPointAdminReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteSdPointAdminReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSdPointAdminReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSdPointAdminReplyMultiError) AllErrors() []error { return m }

// DeleteSdPointAdminReplyValidationError is the validation error returned by
// DeleteSdPointAdminReply.Validate if the designated constraints aren't met.
type DeleteSdPointAdminReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSdPointAdminReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSdPointAdminReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSdPointAdminReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSdPointAdminReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSdPointAdminReplyValidationError) ErrorName() string {
	return "DeleteSdPointAdminReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSdPointAdminReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSdPointAdminReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSdPointAdminReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSdPointAdminReplyValidationError{}

// Validate checks the field values on GetSdPointAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSdPointAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSdPointAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSdPointAdminRequestMultiError, or nil if none found.
func (m *GetSdPointAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSdPointAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSdPointAdminRequestMultiError(errors)
	}

	return nil
}

// GetSdPointAdminRequestMultiError is an error wrapping multiple validation
// errors returned by GetSdPointAdminRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSdPointAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSdPointAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSdPointAdminRequestMultiError) AllErrors() []error { return m }

// GetSdPointAdminRequestValidationError is the validation error returned by
// GetSdPointAdminRequest.Validate if the designated constraints aren't met.
type GetSdPointAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSdPointAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSdPointAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSdPointAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSdPointAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSdPointAdminRequestValidationError) ErrorName() string {
	return "GetSdPointAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSdPointAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSdPointAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSdPointAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSdPointAdminRequestValidationError{}

// Validate checks the field values on GetSdPointAdminReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSdPointAdminReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSdPointAdminReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSdPointAdminReplyMultiError, or nil if none found.
func (m *GetSdPointAdminReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSdPointAdminReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSdPointAdminReplyMultiError(errors)
	}

	return nil
}

// GetSdPointAdminReplyMultiError is an error wrapping multiple validation
// errors returned by GetSdPointAdminReply.ValidateAll() if the designated
// constraints aren't met.
type GetSdPointAdminReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSdPointAdminReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSdPointAdminReplyMultiError) AllErrors() []error { return m }

// GetSdPointAdminReplyValidationError is the validation error returned by
// GetSdPointAdminReply.Validate if the designated constraints aren't met.
type GetSdPointAdminReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSdPointAdminReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSdPointAdminReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSdPointAdminReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSdPointAdminReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSdPointAdminReplyValidationError) ErrorName() string {
	return "GetSdPointAdminReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSdPointAdminReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSdPointAdminReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSdPointAdminReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSdPointAdminReplyValidationError{}

// Validate checks the field values on ListSdPointAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSdPointAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSdPointAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSdPointAdminRequestMultiError, or nil if none found.
func (m *ListSdPointAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSdPointAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSdPointAdminRequestMultiError(errors)
	}

	return nil
}

// ListSdPointAdminRequestMultiError is an error wrapping multiple validation
// errors returned by ListSdPointAdminRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSdPointAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSdPointAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSdPointAdminRequestMultiError) AllErrors() []error { return m }

// ListSdPointAdminRequestValidationError is the validation error returned by
// ListSdPointAdminRequest.Validate if the designated constraints aren't met.
type ListSdPointAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSdPointAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSdPointAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSdPointAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSdPointAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSdPointAdminRequestValidationError) ErrorName() string {
	return "ListSdPointAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSdPointAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSdPointAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSdPointAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSdPointAdminRequestValidationError{}

// Validate checks the field values on ListSdPointAdminReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSdPointAdminReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSdPointAdminReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSdPointAdminReplyMultiError, or nil if none found.
func (m *ListSdPointAdminReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSdPointAdminReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSdPointAdminReplyMultiError(errors)
	}

	return nil
}

// ListSdPointAdminReplyMultiError is an error wrapping multiple validation
// errors returned by ListSdPointAdminReply.ValidateAll() if the designated
// constraints aren't met.
type ListSdPointAdminReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSdPointAdminReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSdPointAdminReplyMultiError) AllErrors() []error { return m }

// ListSdPointAdminReplyValidationError is the validation error returned by
// ListSdPointAdminReply.Validate if the designated constraints aren't met.
type ListSdPointAdminReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSdPointAdminReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSdPointAdminReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSdPointAdminReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSdPointAdminReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSdPointAdminReplyValidationError) ErrorName() string {
	return "ListSdPointAdminReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListSdPointAdminReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSdPointAdminReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSdPointAdminReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSdPointAdminReplyValidationError{}
