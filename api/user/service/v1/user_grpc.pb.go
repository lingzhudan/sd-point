// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: user/service/v1/user.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// 用户登录
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	// 用户登录
	WechatLogin(ctx context.Context, in *WechatLoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	// 用户登录
	PhoneNumberLogin(ctx context.Context, in *PhoneNumberLoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	// 用户登出
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 用户注册
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	// 微信用户注册
	WechatRegister(ctx context.Context, in *WechatRegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	// 手机号用户注册
	PhoneNumberRegister(ctx context.Context, in *PhoneNumberRegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	// 用户绑定微信登录方式
	WechatBind(ctx context.Context, in *WechatBindRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 微信换绑
	WechatSwitchBind(ctx context.Context, in *WechatSwitchBindRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 用户绑定手机号登录方式
	PhoneNumberBind(ctx context.Context, in *PhoneNumberBindRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 手机号换绑
	PhoneNumberSwitchBind(ctx context.Context, in *PhoneNumberSwitchBindRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 用户信息
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error)
	// 用户列表
	ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserReply, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.User/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) WechatLogin(ctx context.Context, in *WechatLoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.User/WechatLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PhoneNumberLogin(ctx context.Context, in *PhoneNumberLoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.User/PhoneNumberLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.user.v1.User/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.User/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) WechatRegister(ctx context.Context, in *WechatRegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.User/WechatRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PhoneNumberRegister(ctx context.Context, in *PhoneNumberRegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.User/PhoneNumberRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) WechatBind(ctx context.Context, in *WechatBindRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.user.v1.User/WechatBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) WechatSwitchBind(ctx context.Context, in *WechatSwitchBindRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.user.v1.User/WechatSwitchBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PhoneNumberBind(ctx context.Context, in *PhoneNumberBindRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.user.v1.User/PhoneNumberBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PhoneNumberSwitchBind(ctx context.Context, in *PhoneNumberSwitchBindRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.user.v1.User/PhoneNumberSwitchBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error) {
	out := new(GetUserReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.User/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserReply, error) {
	out := new(ListUserReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.User/ListUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	// 用户登录
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	// 用户登录
	WechatLogin(context.Context, *WechatLoginRequest) (*LoginReply, error)
	// 用户登录
	PhoneNumberLogin(context.Context, *PhoneNumberLoginRequest) (*LoginReply, error)
	// 用户登出
	Logout(context.Context, *LogoutRequest) (*emptypb.Empty, error)
	// 用户注册
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	// 微信用户注册
	WechatRegister(context.Context, *WechatRegisterRequest) (*RegisterReply, error)
	// 手机号用户注册
	PhoneNumberRegister(context.Context, *PhoneNumberRegisterRequest) (*RegisterReply, error)
	// 用户绑定微信登录方式
	WechatBind(context.Context, *WechatBindRequest) (*emptypb.Empty, error)
	// 微信换绑
	WechatSwitchBind(context.Context, *WechatSwitchBindRequest) (*emptypb.Empty, error)
	// 用户绑定手机号登录方式
	PhoneNumberBind(context.Context, *PhoneNumberBindRequest) (*emptypb.Empty, error)
	// 手机号换绑
	PhoneNumberSwitchBind(context.Context, *PhoneNumberSwitchBindRequest) (*emptypb.Empty, error)
	// 用户信息
	GetUser(context.Context, *GetUserRequest) (*GetUserReply, error)
	// 用户列表
	ListUser(context.Context, *ListUserRequest) (*ListUserReply, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) Login(context.Context, *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServer) WechatLogin(context.Context, *WechatLoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatLogin not implemented")
}
func (UnimplementedUserServer) PhoneNumberLogin(context.Context, *PhoneNumberLoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneNumberLogin not implemented")
}
func (UnimplementedUserServer) Logout(context.Context, *LogoutRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedUserServer) Register(context.Context, *RegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServer) WechatRegister(context.Context, *WechatRegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatRegister not implemented")
}
func (UnimplementedUserServer) PhoneNumberRegister(context.Context, *PhoneNumberRegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneNumberRegister not implemented")
}
func (UnimplementedUserServer) WechatBind(context.Context, *WechatBindRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatBind not implemented")
}
func (UnimplementedUserServer) WechatSwitchBind(context.Context, *WechatSwitchBindRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatSwitchBind not implemented")
}
func (UnimplementedUserServer) PhoneNumberBind(context.Context, *PhoneNumberBindRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneNumberBind not implemented")
}
func (UnimplementedUserServer) PhoneNumberSwitchBind(context.Context, *PhoneNumberSwitchBindRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneNumberSwitchBind not implemented")
}
func (UnimplementedUserServer) GetUser(context.Context, *GetUserRequest) (*GetUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServer) ListUser(context.Context, *ListUserRequest) (*ListUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.User/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_WechatLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).WechatLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.User/WechatLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).WechatLogin(ctx, req.(*WechatLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PhoneNumberLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneNumberLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PhoneNumberLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.User/PhoneNumberLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PhoneNumberLogin(ctx, req.(*PhoneNumberLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.User/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.User/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_WechatRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).WechatRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.User/WechatRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).WechatRegister(ctx, req.(*WechatRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PhoneNumberRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneNumberRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PhoneNumberRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.User/PhoneNumberRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PhoneNumberRegister(ctx, req.(*PhoneNumberRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_WechatBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatBindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).WechatBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.User/WechatBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).WechatBind(ctx, req.(*WechatBindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_WechatSwitchBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatSwitchBindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).WechatSwitchBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.User/WechatSwitchBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).WechatSwitchBind(ctx, req.(*WechatSwitchBindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PhoneNumberBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneNumberBindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PhoneNumberBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.User/PhoneNumberBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PhoneNumberBind(ctx, req.(*PhoneNumberBindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PhoneNumberSwitchBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneNumberSwitchBindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PhoneNumberSwitchBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.User/PhoneNumberSwitchBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PhoneNumberSwitchBind(ctx, req.(*PhoneNumberSwitchBindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.User/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.User/ListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ListUser(ctx, req.(*ListUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user.v1.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _User_Login_Handler,
		},
		{
			MethodName: "WechatLogin",
			Handler:    _User_WechatLogin_Handler,
		},
		{
			MethodName: "PhoneNumberLogin",
			Handler:    _User_PhoneNumberLogin_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _User_Logout_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _User_Register_Handler,
		},
		{
			MethodName: "WechatRegister",
			Handler:    _User_WechatRegister_Handler,
		},
		{
			MethodName: "PhoneNumberRegister",
			Handler:    _User_PhoneNumberRegister_Handler,
		},
		{
			MethodName: "WechatBind",
			Handler:    _User_WechatBind_Handler,
		},
		{
			MethodName: "WechatSwitchBind",
			Handler:    _User_WechatSwitchBind_Handler,
		},
		{
			MethodName: "PhoneNumberBind",
			Handler:    _User_PhoneNumberBind_Handler,
		},
		{
			MethodName: "PhoneNumberSwitchBind",
			Handler:    _User_PhoneNumberSwitchBind_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _User_GetUser_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _User_ListUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/service/v1/user.proto",
}
