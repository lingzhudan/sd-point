// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/user/service/v1/user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetPublicKeyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPublicKeyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublicKeyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPublicKeyReplyMultiError, or nil if none found.
func (m *GetPublicKeyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublicKeyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublicKey

	if len(errors) > 0 {
		return GetPublicKeyReplyMultiError(errors)
	}

	return nil
}

// GetPublicKeyReplyMultiError is an error wrapping multiple validation errors
// returned by GetPublicKeyReply.ValidateAll() if the designated constraints
// aren't met.
type GetPublicKeyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublicKeyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublicKeyReplyMultiError) AllErrors() []error { return m }

// GetPublicKeyReplyValidationError is the validation error returned by
// GetPublicKeyReply.Validate if the designated constraints aren't met.
type GetPublicKeyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublicKeyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublicKeyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublicKeyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublicKeyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublicKeyReplyValidationError) ErrorName() string {
	return "GetPublicKeyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublicKeyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublicKeyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublicKeyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublicKeyReplyValidationError{}

// Validate checks the field values on GetSessionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSessionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSessionRequestMultiError, or nil if none found.
func (m *GetSessionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSessionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSessionId()) != 36 {
		err := GetSessionRequestValidationError{
			field:  "SessionId",
			reason: "value length must be 36 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return GetSessionRequestMultiError(errors)
	}

	return nil
}

// GetSessionRequestMultiError is an error wrapping multiple validation errors
// returned by GetSessionRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSessionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSessionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSessionRequestMultiError) AllErrors() []error { return m }

// GetSessionRequestValidationError is the validation error returned by
// GetSessionRequest.Validate if the designated constraints aren't met.
type GetSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSessionRequestValidationError) ErrorName() string {
	return "GetSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSessionRequestValidationError{}

// Validate checks the field values on GetSessionReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSessionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSessionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSessionReplyMultiError, or nil if none found.
func (m *GetSessionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSessionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSession()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSessionReplyValidationError{
					field:  "Session",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSessionReplyValidationError{
					field:  "Session",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSession()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSessionReplyValidationError{
				field:  "Session",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSessionReplyMultiError(errors)
	}

	return nil
}

// GetSessionReplyMultiError is an error wrapping multiple validation errors
// returned by GetSessionReply.ValidateAll() if the designated constraints
// aren't met.
type GetSessionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSessionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSessionReplyMultiError) AllErrors() []error { return m }

// GetSessionReplyValidationError is the validation error returned by
// GetSessionReply.Validate if the designated constraints aren't met.
type GetSessionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSessionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSessionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSessionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSessionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSessionReplyValidationError) ErrorName() string { return "GetSessionReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetSessionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSessionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSessionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSessionReplyValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccount()) > 64 {
		err := LoginRequestValidationError{
			field:  "Account",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := LoginRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on WechatLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WechatLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WechatLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WechatLoginRequestMultiError, or nil if none found.
func (m *WechatLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WechatLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOpenId()) != 32 {
		err := WechatLoginRequestValidationError{
			field:  "OpenId",
			reason: "value length must be 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return WechatLoginRequestMultiError(errors)
	}

	return nil
}

// WechatLoginRequestMultiError is an error wrapping multiple validation errors
// returned by WechatLoginRequest.ValidateAll() if the designated constraints
// aren't met.
type WechatLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WechatLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WechatLoginRequestMultiError) AllErrors() []error { return m }

// WechatLoginRequestValidationError is the validation error returned by
// WechatLoginRequest.Validate if the designated constraints aren't met.
type WechatLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WechatLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WechatLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WechatLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WechatLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WechatLoginRequestValidationError) ErrorName() string {
	return "WechatLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WechatLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWechatLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WechatLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WechatLoginRequestValidationError{}

// Validate checks the field values on PhoneNumberLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PhoneNumberLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PhoneNumberLoginRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PhoneNumberLoginRequestMultiError, or nil if none found.
func (m *PhoneNumberLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PhoneNumberLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPhoneNumber()); l < 10 || l > 16 {
		err := PhoneNumberLoginRequestValidationError{
			field:  "PhoneNumber",
			reason: "value length must be between 10 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PhoneNumberLoginRequestMultiError(errors)
	}

	return nil
}

// PhoneNumberLoginRequestMultiError is an error wrapping multiple validation
// errors returned by PhoneNumberLoginRequest.ValidateAll() if the designated
// constraints aren't met.
type PhoneNumberLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PhoneNumberLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PhoneNumberLoginRequestMultiError) AllErrors() []error { return m }

// PhoneNumberLoginRequestValidationError is the validation error returned by
// PhoneNumberLoginRequest.Validate if the designated constraints aren't met.
type PhoneNumberLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PhoneNumberLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PhoneNumberLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PhoneNumberLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PhoneNumberLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PhoneNumberLoginRequestValidationError) ErrorName() string {
	return "PhoneNumberLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PhoneNumberLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPhoneNumberLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PhoneNumberLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PhoneNumberLoginRequestValidationError{}

// Validate checks the field values on LoginReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReplyMultiError, or
// nil if none found.
func (m *LoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	if len(errors) > 0 {
		return LoginReplyMultiError(errors)
	}

	return nil
}

// LoginReplyMultiError is an error wrapping multiple validation errors
// returned by LoginReply.ValidateAll() if the designated constraints aren't met.
type LoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReplyMultiError) AllErrors() []error { return m }

// LoginReplyValidationError is the validation error returned by
// LoginReply.Validate if the designated constraints aren't met.
type LoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReplyValidationError) ErrorName() string { return "LoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReplyValidationError{}

// Validate checks the field values on LogoutRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutRequestMultiError, or
// nil if none found.
func (m *LogoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	if len(errors) > 0 {
		return LogoutRequestMultiError(errors)
	}

	return nil
}

// LogoutRequestMultiError is an error wrapping multiple validation errors
// returned by LogoutRequest.ValidateAll() if the designated constraints
// aren't met.
type LogoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutRequestMultiError) AllErrors() []error { return m }

// LogoutRequestValidationError is the validation error returned by
// LogoutRequest.Validate if the designated constraints aren't met.
type LogoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRequestValidationError) ErrorName() string { return "LogoutRequestValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRequestValidationError{}

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 8 || l > 64 {
		err := RegisterRequestValidationError{
			field:  "Account",
			reason: "value length must be between 8 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := RegisterRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

// Validate checks the field values on WechatRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WechatRegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WechatRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WechatRegisterRequestMultiError, or nil if none found.
func (m *WechatRegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WechatRegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOpenid()) != 32 {
		err := WechatRegisterRequestValidationError{
			field:  "Openid",
			reason: "value length must be 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return WechatRegisterRequestMultiError(errors)
	}

	return nil
}

// WechatRegisterRequestMultiError is an error wrapping multiple validation
// errors returned by WechatRegisterRequest.ValidateAll() if the designated
// constraints aren't met.
type WechatRegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WechatRegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WechatRegisterRequestMultiError) AllErrors() []error { return m }

// WechatRegisterRequestValidationError is the validation error returned by
// WechatRegisterRequest.Validate if the designated constraints aren't met.
type WechatRegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WechatRegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WechatRegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WechatRegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WechatRegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WechatRegisterRequestValidationError) ErrorName() string {
	return "WechatRegisterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WechatRegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWechatRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WechatRegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WechatRegisterRequestValidationError{}

// Validate checks the field values on PhoneNumberRegisterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PhoneNumberRegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PhoneNumberRegisterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PhoneNumberRegisterRequestMultiError, or nil if none found.
func (m *PhoneNumberRegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PhoneNumberRegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPhoneNumber()); l < 10 || l > 16 {
		err := PhoneNumberRegisterRequestValidationError{
			field:  "PhoneNumber",
			reason: "value length must be between 10 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PhoneNumberRegisterRequestMultiError(errors)
	}

	return nil
}

// PhoneNumberRegisterRequestMultiError is an error wrapping multiple
// validation errors returned by PhoneNumberRegisterRequest.ValidateAll() if
// the designated constraints aren't met.
type PhoneNumberRegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PhoneNumberRegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PhoneNumberRegisterRequestMultiError) AllErrors() []error { return m }

// PhoneNumberRegisterRequestValidationError is the validation error returned
// by PhoneNumberRegisterRequest.Validate if the designated constraints aren't met.
type PhoneNumberRegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PhoneNumberRegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PhoneNumberRegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PhoneNumberRegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PhoneNumberRegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PhoneNumberRegisterRequestValidationError) ErrorName() string {
	return "PhoneNumberRegisterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PhoneNumberRegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPhoneNumberRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PhoneNumberRegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PhoneNumberRegisterRequestValidationError{}

// Validate checks the field values on RegisterReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegisterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegisterReplyMultiError, or
// nil if none found.
func (m *RegisterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return RegisterReplyMultiError(errors)
	}

	return nil
}

// RegisterReplyMultiError is an error wrapping multiple validation errors
// returned by RegisterReply.ValidateAll() if the designated constraints
// aren't met.
type RegisterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterReplyMultiError) AllErrors() []error { return m }

// RegisterReplyValidationError is the validation error returned by
// RegisterReply.Validate if the designated constraints aren't met.
type RegisterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterReplyValidationError) ErrorName() string { return "RegisterReplyValidationError" }

// Error satisfies the builtin error interface
func (e RegisterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterReplyValidationError{}

// Validate checks the field values on WechatBindRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WechatBindRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WechatBindRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WechatBindRequestMultiError, or nil if none found.
func (m *WechatBindRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WechatBindRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if utf8.RuneCountInString(m.GetOpenid()) != 32 {
		err := WechatBindRequestValidationError{
			field:  "Openid",
			reason: "value length must be 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return WechatBindRequestMultiError(errors)
	}

	return nil
}

// WechatBindRequestMultiError is an error wrapping multiple validation errors
// returned by WechatBindRequest.ValidateAll() if the designated constraints
// aren't met.
type WechatBindRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WechatBindRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WechatBindRequestMultiError) AllErrors() []error { return m }

// WechatBindRequestValidationError is the validation error returned by
// WechatBindRequest.Validate if the designated constraints aren't met.
type WechatBindRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WechatBindRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WechatBindRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WechatBindRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WechatBindRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WechatBindRequestValidationError) ErrorName() string {
	return "WechatBindRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WechatBindRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWechatBindRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WechatBindRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WechatBindRequestValidationError{}

// Validate checks the field values on PhoneNumberBindRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PhoneNumberBindRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PhoneNumberBindRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PhoneNumberBindRequestMultiError, or nil if none found.
func (m *PhoneNumberBindRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PhoneNumberBindRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if l := utf8.RuneCountInString(m.GetPhoneNumber()); l < 10 || l > 16 {
		err := PhoneNumberBindRequestValidationError{
			field:  "PhoneNumber",
			reason: "value length must be between 10 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PhoneNumberBindRequestMultiError(errors)
	}

	return nil
}

// PhoneNumberBindRequestMultiError is an error wrapping multiple validation
// errors returned by PhoneNumberBindRequest.ValidateAll() if the designated
// constraints aren't met.
type PhoneNumberBindRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PhoneNumberBindRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PhoneNumberBindRequestMultiError) AllErrors() []error { return m }

// PhoneNumberBindRequestValidationError is the validation error returned by
// PhoneNumberBindRequest.Validate if the designated constraints aren't met.
type PhoneNumberBindRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PhoneNumberBindRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PhoneNumberBindRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PhoneNumberBindRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PhoneNumberBindRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PhoneNumberBindRequestValidationError) ErrorName() string {
	return "PhoneNumberBindRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PhoneNumberBindRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPhoneNumberBindRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PhoneNumberBindRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PhoneNumberBindRequestValidationError{}

// Validate checks the field values on WechatSwitchBindRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WechatSwitchBindRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WechatSwitchBindRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WechatSwitchBindRequestMultiError, or nil if none found.
func (m *WechatSwitchBindRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WechatSwitchBindRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if utf8.RuneCountInString(m.GetOpenid()) != 32 {
		err := WechatSwitchBindRequestValidationError{
			field:  "Openid",
			reason: "value length must be 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return WechatSwitchBindRequestMultiError(errors)
	}

	return nil
}

// WechatSwitchBindRequestMultiError is an error wrapping multiple validation
// errors returned by WechatSwitchBindRequest.ValidateAll() if the designated
// constraints aren't met.
type WechatSwitchBindRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WechatSwitchBindRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WechatSwitchBindRequestMultiError) AllErrors() []error { return m }

// WechatSwitchBindRequestValidationError is the validation error returned by
// WechatSwitchBindRequest.Validate if the designated constraints aren't met.
type WechatSwitchBindRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WechatSwitchBindRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WechatSwitchBindRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WechatSwitchBindRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WechatSwitchBindRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WechatSwitchBindRequestValidationError) ErrorName() string {
	return "WechatSwitchBindRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WechatSwitchBindRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWechatSwitchBindRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WechatSwitchBindRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WechatSwitchBindRequestValidationError{}

// Validate checks the field values on PhoneNumberSwitchBindRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PhoneNumberSwitchBindRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PhoneNumberSwitchBindRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PhoneNumberSwitchBindRequestMultiError, or nil if none found.
func (m *PhoneNumberSwitchBindRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PhoneNumberSwitchBindRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if l := utf8.RuneCountInString(m.GetPhoneNumber()); l < 10 || l > 16 {
		err := PhoneNumberSwitchBindRequestValidationError{
			field:  "PhoneNumber",
			reason: "value length must be between 10 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PhoneNumberSwitchBindRequestMultiError(errors)
	}

	return nil
}

// PhoneNumberSwitchBindRequestMultiError is an error wrapping multiple
// validation errors returned by PhoneNumberSwitchBindRequest.ValidateAll() if
// the designated constraints aren't met.
type PhoneNumberSwitchBindRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PhoneNumberSwitchBindRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PhoneNumberSwitchBindRequestMultiError) AllErrors() []error { return m }

// PhoneNumberSwitchBindRequestValidationError is the validation error returned
// by PhoneNumberSwitchBindRequest.Validate if the designated constraints
// aren't met.
type PhoneNumberSwitchBindRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PhoneNumberSwitchBindRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PhoneNumberSwitchBindRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PhoneNumberSwitchBindRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PhoneNumberSwitchBindRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PhoneNumberSwitchBindRequestValidationError) ErrorName() string {
	return "PhoneNumberSwitchBindRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PhoneNumberSwitchBindRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPhoneNumberSwitchBindRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PhoneNumberSwitchBindRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PhoneNumberSwitchBindRequestValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserReplyMultiError, or
// nil if none found.
func (m *GetUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserReplyMultiError(errors)
	}

	return nil
}

// GetUserReplyMultiError is an error wrapping multiple validation errors
// returned by GetUserReply.ValidateAll() if the designated constraints aren't met.
type GetUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReplyMultiError) AllErrors() []error { return m }

// GetUserReplyValidationError is the validation error returned by
// GetUserReply.Validate if the designated constraints aren't met.
type GetUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReplyValidationError) ErrorName() string { return "GetUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReplyValidationError{}

// Validate checks the field values on ListUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserRequestMultiError, or nil if none found.
func (m *ListUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetUids()) > 128 {
		err := ListUserRequestValidationError{
			field:  "Uids",
			reason: "value must contain no more than 128 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListUserRequestMultiError(errors)
	}

	return nil
}

// ListUserRequestMultiError is an error wrapping multiple validation errors
// returned by ListUserRequest.ValidateAll() if the designated constraints
// aren't met.
type ListUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserRequestMultiError) AllErrors() []error { return m }

// ListUserRequestValidationError is the validation error returned by
// ListUserRequest.Validate if the designated constraints aren't met.
type ListUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRequestValidationError) ErrorName() string { return "ListUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRequestValidationError{}

// Validate checks the field values on ListUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListUserReplyMultiError, or
// nil if none found.
func (m *ListUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserReplyMultiError(errors)
	}

	return nil
}

// ListUserReplyMultiError is an error wrapping multiple validation errors
// returned by ListUserReply.ValidateAll() if the designated constraints
// aren't met.
type ListUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserReplyMultiError) AllErrors() []error { return m }

// ListUserReplyValidationError is the validation error returned by
// ListUserReply.Validate if the designated constraints aren't met.
type ListUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReplyValidationError) ErrorName() string { return "ListUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReplyValidationError{}

// Validate checks the field values on GetSessionReply_Session with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSessionReply_Session) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSessionReply_Session with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSessionReply_SessionMultiError, or nil if none found.
func (m *GetSessionReply_Session) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSessionReply_Session) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return GetSessionReply_SessionMultiError(errors)
	}

	return nil
}

// GetSessionReply_SessionMultiError is an error wrapping multiple validation
// errors returned by GetSessionReply_Session.ValidateAll() if the designated
// constraints aren't met.
type GetSessionReply_SessionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSessionReply_SessionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSessionReply_SessionMultiError) AllErrors() []error { return m }

// GetSessionReply_SessionValidationError is the validation error returned by
// GetSessionReply_Session.Validate if the designated constraints aren't met.
type GetSessionReply_SessionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSessionReply_SessionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSessionReply_SessionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSessionReply_SessionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSessionReply_SessionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSessionReply_SessionValidationError) ErrorName() string {
	return "GetSessionReply_SessionValidationError"
}

// Error satisfies the builtin error interface
func (e GetSessionReply_SessionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSessionReply_Session.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSessionReply_SessionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSessionReply_SessionValidationError{}

// Validate checks the field values on GetUserReply_User with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserReply_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReply_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserReply_UserMultiError, or nil if none found.
func (m *GetUserReply_User) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReply_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Username

	if len(errors) > 0 {
		return GetUserReply_UserMultiError(errors)
	}

	return nil
}

// GetUserReply_UserMultiError is an error wrapping multiple validation errors
// returned by GetUserReply_User.ValidateAll() if the designated constraints
// aren't met.
type GetUserReply_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReply_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReply_UserMultiError) AllErrors() []error { return m }

// GetUserReply_UserValidationError is the validation error returned by
// GetUserReply_User.Validate if the designated constraints aren't met.
type GetUserReply_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReply_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReply_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReply_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReply_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReply_UserValidationError) ErrorName() string {
	return "GetUserReply_UserValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserReply_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReply_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReply_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReply_UserValidationError{}
