// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: point/v1/point.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PointClient is the client API for Point service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PointClient interface {
	// 创建点数
	CreatePoint(ctx context.Context, in *CreatePointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新点数
	UpdatePoint(ctx context.Context, in *UpdatePointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除点数
	DeletePoint(ctx context.Context, in *DeletePointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取点数
	GetPoint(ctx context.Context, in *GetPointRequest, opts ...grpc.CallOption) (*GetPointReply, error)
	// 获取点数列表
	ListPoint(ctx context.Context, in *ListPointRequest, opts ...grpc.CallOption) (*ListPointReply, error)
	// 创建记录
	CreateRecords(ctx context.Context, in *CreateRecordsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新记录
	UpdateRecord(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除记录
	DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取记录列表
	ListRecord(ctx context.Context, in *ListRecordRequest, opts ...grpc.CallOption) (*ListRecordReply, error)
}

type pointClient struct {
	cc grpc.ClientConnInterface
}

func NewPointClient(cc grpc.ClientConnInterface) PointClient {
	return &pointClient{cc}
}

func (c *pointClient) CreatePoint(ctx context.Context, in *CreatePointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.point.v1.Point/CreatePoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointClient) UpdatePoint(ctx context.Context, in *UpdatePointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.point.v1.Point/UpdatePoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointClient) DeletePoint(ctx context.Context, in *DeletePointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.point.v1.Point/DeletePoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointClient) GetPoint(ctx context.Context, in *GetPointRequest, opts ...grpc.CallOption) (*GetPointReply, error) {
	out := new(GetPointReply)
	err := c.cc.Invoke(ctx, "/api.point.v1.Point/GetPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointClient) ListPoint(ctx context.Context, in *ListPointRequest, opts ...grpc.CallOption) (*ListPointReply, error) {
	out := new(ListPointReply)
	err := c.cc.Invoke(ctx, "/api.point.v1.Point/ListPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointClient) CreateRecords(ctx context.Context, in *CreateRecordsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.point.v1.Point/CreateRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointClient) UpdateRecord(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.point.v1.Point/UpdateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointClient) DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.point.v1.Point/DeleteRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointClient) ListRecord(ctx context.Context, in *ListRecordRequest, opts ...grpc.CallOption) (*ListRecordReply, error) {
	out := new(ListRecordReply)
	err := c.cc.Invoke(ctx, "/api.point.v1.Point/ListRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PointServer is the server API for Point service.
// All implementations must embed UnimplementedPointServer
// for forward compatibility
type PointServer interface {
	// 创建点数
	CreatePoint(context.Context, *CreatePointRequest) (*emptypb.Empty, error)
	// 更新点数
	UpdatePoint(context.Context, *UpdatePointRequest) (*emptypb.Empty, error)
	// 删除点数
	DeletePoint(context.Context, *DeletePointRequest) (*emptypb.Empty, error)
	// 获取点数
	GetPoint(context.Context, *GetPointRequest) (*GetPointReply, error)
	// 获取点数列表
	ListPoint(context.Context, *ListPointRequest) (*ListPointReply, error)
	// 创建记录
	CreateRecords(context.Context, *CreateRecordsRequest) (*emptypb.Empty, error)
	// 更新记录
	UpdateRecord(context.Context, *UpdateRecordRequest) (*emptypb.Empty, error)
	// 删除记录
	DeleteRecord(context.Context, *DeleteRecordRequest) (*emptypb.Empty, error)
	// 获取记录列表
	ListRecord(context.Context, *ListRecordRequest) (*ListRecordReply, error)
	mustEmbedUnimplementedPointServer()
}

// UnimplementedPointServer must be embedded to have forward compatible implementations.
type UnimplementedPointServer struct {
}

func (UnimplementedPointServer) CreatePoint(context.Context, *CreatePointRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePoint not implemented")
}
func (UnimplementedPointServer) UpdatePoint(context.Context, *UpdatePointRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePoint not implemented")
}
func (UnimplementedPointServer) DeletePoint(context.Context, *DeletePointRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePoint not implemented")
}
func (UnimplementedPointServer) GetPoint(context.Context, *GetPointRequest) (*GetPointReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoint not implemented")
}
func (UnimplementedPointServer) ListPoint(context.Context, *ListPointRequest) (*ListPointReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPoint not implemented")
}
func (UnimplementedPointServer) CreateRecords(context.Context, *CreateRecordsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecords not implemented")
}
func (UnimplementedPointServer) UpdateRecord(context.Context, *UpdateRecordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecord not implemented")
}
func (UnimplementedPointServer) DeleteRecord(context.Context, *DeleteRecordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecord not implemented")
}
func (UnimplementedPointServer) ListRecord(context.Context, *ListRecordRequest) (*ListRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecord not implemented")
}
func (UnimplementedPointServer) mustEmbedUnimplementedPointServer() {}

// UnsafePointServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PointServer will
// result in compilation errors.
type UnsafePointServer interface {
	mustEmbedUnimplementedPointServer()
}

func RegisterPointServer(s grpc.ServiceRegistrar, srv PointServer) {
	s.RegisterService(&Point_ServiceDesc, srv)
}

func _Point_CreatePoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointServer).CreatePoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.point.v1.Point/CreatePoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointServer).CreatePoint(ctx, req.(*CreatePointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Point_UpdatePoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointServer).UpdatePoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.point.v1.Point/UpdatePoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointServer).UpdatePoint(ctx, req.(*UpdatePointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Point_DeletePoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointServer).DeletePoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.point.v1.Point/DeletePoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointServer).DeletePoint(ctx, req.(*DeletePointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Point_GetPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointServer).GetPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.point.v1.Point/GetPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointServer).GetPoint(ctx, req.(*GetPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Point_ListPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointServer).ListPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.point.v1.Point/ListPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointServer).ListPoint(ctx, req.(*ListPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Point_CreateRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointServer).CreateRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.point.v1.Point/CreateRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointServer).CreateRecords(ctx, req.(*CreateRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Point_UpdateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointServer).UpdateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.point.v1.Point/UpdateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointServer).UpdateRecord(ctx, req.(*UpdateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Point_DeleteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointServer).DeleteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.point.v1.Point/DeleteRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointServer).DeleteRecord(ctx, req.(*DeleteRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Point_ListRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointServer).ListRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.point.v1.Point/ListRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointServer).ListRecord(ctx, req.(*ListRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Point_ServiceDesc is the grpc.ServiceDesc for Point service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Point_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.point.v1.Point",
	HandlerType: (*PointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePoint",
			Handler:    _Point_CreatePoint_Handler,
		},
		{
			MethodName: "UpdatePoint",
			Handler:    _Point_UpdatePoint_Handler,
		},
		{
			MethodName: "DeletePoint",
			Handler:    _Point_DeletePoint_Handler,
		},
		{
			MethodName: "GetPoint",
			Handler:    _Point_GetPoint_Handler,
		},
		{
			MethodName: "ListPoint",
			Handler:    _Point_ListPoint_Handler,
		},
		{
			MethodName: "CreateRecords",
			Handler:    _Point_CreateRecords_Handler,
		},
		{
			MethodName: "UpdateRecord",
			Handler:    _Point_UpdateRecord_Handler,
		},
		{
			MethodName: "DeleteRecord",
			Handler:    _Point_DeleteRecord_Handler,
		},
		{
			MethodName: "ListRecord",
			Handler:    _Point_ListRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "point/v1/point.proto",
}
