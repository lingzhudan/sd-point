// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: point/v1/point.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PointClient is the client API for Point service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PointClient interface {
	CreatePoints(ctx context.Context, in *CreatePointsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	UpdatePoint(ctx context.Context, in *UpdatePointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeletePoint(ctx context.Context, in *DeletePointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPoint(ctx context.Context, in *GetPointRequest, opts ...grpc.CallOption) (*GetPointReply, error)
	ListPoint(ctx context.Context, in *ListPointRequest, opts ...grpc.CallOption) (*ListPointReply, error)
}

type pointClient struct {
	cc grpc.ClientConnInterface
}

func NewPointClient(cc grpc.ClientConnInterface) PointClient {
	return &pointClient{cc}
}

func (c *pointClient) CreatePoints(ctx context.Context, in *CreatePointsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.point.v1.Point/CreatePoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/api.point.v1.Point/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointClient) UpdatePoint(ctx context.Context, in *UpdatePointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.point.v1.Point/UpdatePoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointClient) DeletePoint(ctx context.Context, in *DeletePointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.point.v1.Point/DeletePoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointClient) GetPoint(ctx context.Context, in *GetPointRequest, opts ...grpc.CallOption) (*GetPointReply, error) {
	out := new(GetPointReply)
	err := c.cc.Invoke(ctx, "/api.point.v1.Point/GetPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointClient) ListPoint(ctx context.Context, in *ListPointRequest, opts ...grpc.CallOption) (*ListPointReply, error) {
	out := new(ListPointReply)
	err := c.cc.Invoke(ctx, "/api.point.v1.Point/ListPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PointServer is the server API for Point service.
// All implementations must embed UnimplementedPointServer
// for forward compatibility
type PointServer interface {
	CreatePoints(context.Context, *CreatePointsRequest) (*emptypb.Empty, error)
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	UpdatePoint(context.Context, *UpdatePointRequest) (*emptypb.Empty, error)
	DeletePoint(context.Context, *DeletePointRequest) (*emptypb.Empty, error)
	GetPoint(context.Context, *GetPointRequest) (*GetPointReply, error)
	ListPoint(context.Context, *ListPointRequest) (*ListPointReply, error)
	mustEmbedUnimplementedPointServer()
}

// UnimplementedPointServer must be embedded to have forward compatible implementations.
type UnimplementedPointServer struct {
}

func (UnimplementedPointServer) CreatePoints(context.Context, *CreatePointsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePoints not implemented")
}
func (UnimplementedPointServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedPointServer) UpdatePoint(context.Context, *UpdatePointRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePoint not implemented")
}
func (UnimplementedPointServer) DeletePoint(context.Context, *DeletePointRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePoint not implemented")
}
func (UnimplementedPointServer) GetPoint(context.Context, *GetPointRequest) (*GetPointReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoint not implemented")
}
func (UnimplementedPointServer) ListPoint(context.Context, *ListPointRequest) (*ListPointReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPoint not implemented")
}
func (UnimplementedPointServer) mustEmbedUnimplementedPointServer() {}

// UnsafePointServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PointServer will
// result in compilation errors.
type UnsafePointServer interface {
	mustEmbedUnimplementedPointServer()
}

func RegisterPointServer(s grpc.ServiceRegistrar, srv PointServer) {
	s.RegisterService(&Point_ServiceDesc, srv)
}

func _Point_CreatePoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointServer).CreatePoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.point.v1.Point/CreatePoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointServer).CreatePoints(ctx, req.(*CreatePointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Point_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.point.v1.Point/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Point_UpdatePoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointServer).UpdatePoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.point.v1.Point/UpdatePoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointServer).UpdatePoint(ctx, req.(*UpdatePointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Point_DeletePoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointServer).DeletePoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.point.v1.Point/DeletePoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointServer).DeletePoint(ctx, req.(*DeletePointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Point_GetPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointServer).GetPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.point.v1.Point/GetPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointServer).GetPoint(ctx, req.(*GetPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Point_ListPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointServer).ListPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.point.v1.Point/ListPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointServer).ListPoint(ctx, req.(*ListPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Point_ServiceDesc is the grpc.ServiceDesc for Point service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Point_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.point.v1.Point",
	HandlerType: (*PointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePoints",
			Handler:    _Point_CreatePoints_Handler,
		},
		{
			MethodName: "SayHello",
			Handler:    _Point_SayHello_Handler,
		},
		{
			MethodName: "UpdatePoint",
			Handler:    _Point_UpdatePoint_Handler,
		},
		{
			MethodName: "DeletePoint",
			Handler:    _Point_DeletePoint_Handler,
		},
		{
			MethodName: "GetPoint",
			Handler:    _Point_GetPoint_Handler,
		},
		{
			MethodName: "ListPoint",
			Handler:    _Point_ListPoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "point/v1/point.proto",
}
