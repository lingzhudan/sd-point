// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: point/v1/point.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PointInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PointInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PointInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PointInfoMultiError, or nil
// if none found.
func (m *PointInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PointInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PtId

	if val := m.GetNum(); val < -65536 || val > 65535 {
		err := PointInfoValidationError{
			field:  "Num",
			reason: "value must be inside range [-65536, 65535]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDesc()) > 1024 {
		err := PointInfoValidationError{
			field:  "Desc",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ClickedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return PointInfoMultiError(errors)
	}

	return nil
}

// PointInfoMultiError is an error wrapping multiple validation errors returned
// by PointInfo.ValidateAll() if the designated constraints aren't met.
type PointInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PointInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PointInfoMultiError) AllErrors() []error { return m }

// PointInfoValidationError is the validation error returned by
// PointInfo.Validate if the designated constraints aren't met.
type PointInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PointInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PointInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PointInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PointInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PointInfoValidationError) ErrorName() string { return "PointInfoValidationError" }

// Error satisfies the builtin error interface
func (e PointInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPointInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PointInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PointInfoValidationError{}

// Validate checks the field values on CreatePointsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePointsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePointsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePointsRequestMultiError, or nil if none found.
func (m *CreatePointsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePointsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(m.GetPoint()) < 1 {
		err := CreatePointsRequestValidationError{
			field:  "Point",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPoint() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreatePointsRequestValidationError{
						field:  fmt.Sprintf("Point[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreatePointsRequestValidationError{
						field:  fmt.Sprintf("Point[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreatePointsRequestValidationError{
					field:  fmt.Sprintf("Point[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreatePointsRequestMultiError(errors)
	}

	return nil
}

// CreatePointsRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePointsRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePointsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePointsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePointsRequestMultiError) AllErrors() []error { return m }

// CreatePointsRequestValidationError is the validation error returned by
// CreatePointsRequest.Validate if the designated constraints aren't met.
type CreatePointsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePointsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePointsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePointsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePointsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePointsRequestValidationError) ErrorName() string {
	return "CreatePointsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePointsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePointsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePointsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePointsRequestValidationError{}

// Validate checks the field values on UpdatePointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePointRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePointRequestMultiError, or nil if none found.
func (m *UpdatePointRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePointRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePointRequestMultiError(errors)
	}

	return nil
}

// UpdatePointRequestMultiError is an error wrapping multiple validation errors
// returned by UpdatePointRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdatePointRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePointRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePointRequestMultiError) AllErrors() []error { return m }

// UpdatePointRequestValidationError is the validation error returned by
// UpdatePointRequest.Validate if the designated constraints aren't met.
type UpdatePointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePointRequestValidationError) ErrorName() string {
	return "UpdatePointRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePointRequestValidationError{}

// Validate checks the field values on UpdatePointReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdatePointReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePointReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePointReplyMultiError, or nil if none found.
func (m *UpdatePointReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePointReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePointReplyMultiError(errors)
	}

	return nil
}

// UpdatePointReplyMultiError is an error wrapping multiple validation errors
// returned by UpdatePointReply.ValidateAll() if the designated constraints
// aren't met.
type UpdatePointReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePointReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePointReplyMultiError) AllErrors() []error { return m }

// UpdatePointReplyValidationError is the validation error returned by
// UpdatePointReply.Validate if the designated constraints aren't met.
type UpdatePointReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePointReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePointReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePointReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePointReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePointReplyValidationError) ErrorName() string { return "UpdatePointReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdatePointReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePointReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePointReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePointReplyValidationError{}

// Validate checks the field values on DeletePointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePointRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePointRequestMultiError, or nil if none found.
func (m *DeletePointRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePointRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeletePointRequestMultiError(errors)
	}

	return nil
}

// DeletePointRequestMultiError is an error wrapping multiple validation errors
// returned by DeletePointRequest.ValidateAll() if the designated constraints
// aren't met.
type DeletePointRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePointRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePointRequestMultiError) AllErrors() []error { return m }

// DeletePointRequestValidationError is the validation error returned by
// DeletePointRequest.Validate if the designated constraints aren't met.
type DeletePointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePointRequestValidationError) ErrorName() string {
	return "DeletePointRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePointRequestValidationError{}

// Validate checks the field values on DeletePointReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeletePointReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePointReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePointReplyMultiError, or nil if none found.
func (m *DeletePointReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePointReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeletePointReplyMultiError(errors)
	}

	return nil
}

// DeletePointReplyMultiError is an error wrapping multiple validation errors
// returned by DeletePointReply.ValidateAll() if the designated constraints
// aren't met.
type DeletePointReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePointReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePointReplyMultiError) AllErrors() []error { return m }

// DeletePointReplyValidationError is the validation error returned by
// DeletePointReply.Validate if the designated constraints aren't met.
type DeletePointReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePointReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePointReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePointReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePointReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePointReplyValidationError) ErrorName() string { return "DeletePointReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeletePointReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePointReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePointReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePointReplyValidationError{}

// Validate checks the field values on GetPointRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPointRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPointRequestMultiError, or nil if none found.
func (m *GetPointRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPointRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPointRequestMultiError(errors)
	}

	return nil
}

// GetPointRequestMultiError is an error wrapping multiple validation errors
// returned by GetPointRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPointRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPointRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPointRequestMultiError) AllErrors() []error { return m }

// GetPointRequestValidationError is the validation error returned by
// GetPointRequest.Validate if the designated constraints aren't met.
type GetPointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPointRequestValidationError) ErrorName() string { return "GetPointRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPointRequestValidationError{}

// Validate checks the field values on GetPointReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPointReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPointReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetPointReplyMultiError, or
// nil if none found.
func (m *GetPointReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPointReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPointReplyMultiError(errors)
	}

	return nil
}

// GetPointReplyMultiError is an error wrapping multiple validation errors
// returned by GetPointReply.ValidateAll() if the designated constraints
// aren't met.
type GetPointReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPointReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPointReplyMultiError) AllErrors() []error { return m }

// GetPointReplyValidationError is the validation error returned by
// GetPointReply.Validate if the designated constraints aren't met.
type GetPointReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPointReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPointReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPointReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPointReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPointReplyValidationError) ErrorName() string { return "GetPointReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetPointReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPointReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPointReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPointReplyValidationError{}

// Validate checks the field values on ListPointRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPointRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPointRequestMultiError, or nil if none found.
func (m *ListPointRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPointRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListPointRequestMultiError(errors)
	}

	return nil
}

// ListPointRequestMultiError is an error wrapping multiple validation errors
// returned by ListPointRequest.ValidateAll() if the designated constraints
// aren't met.
type ListPointRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPointRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPointRequestMultiError) AllErrors() []error { return m }

// ListPointRequestValidationError is the validation error returned by
// ListPointRequest.Validate if the designated constraints aren't met.
type ListPointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPointRequestValidationError) ErrorName() string { return "ListPointRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListPointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPointRequestValidationError{}

// Validate checks the field values on ListPointReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListPointReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPointReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListPointReplyMultiError,
// or nil if none found.
func (m *ListPointReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPointReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListPointReplyMultiError(errors)
	}

	return nil
}

// ListPointReplyMultiError is an error wrapping multiple validation errors
// returned by ListPointReply.ValidateAll() if the designated constraints
// aren't met.
type ListPointReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPointReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPointReplyMultiError) AllErrors() []error { return m }

// ListPointReplyValidationError is the validation error returned by
// ListPointReply.Validate if the designated constraints aren't met.
type ListPointReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPointReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPointReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPointReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPointReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPointReplyValidationError) ErrorName() string { return "ListPointReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListPointReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPointReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPointReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPointReplyValidationError{}

// Validate checks the field values on HelloRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HelloRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelloRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HelloRequestMultiError, or
// nil if none found.
func (m *HelloRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HelloRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return HelloRequestMultiError(errors)
	}

	return nil
}

// HelloRequestMultiError is an error wrapping multiple validation errors
// returned by HelloRequest.ValidateAll() if the designated constraints aren't met.
type HelloRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelloRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelloRequestMultiError) AllErrors() []error { return m }

// HelloRequestValidationError is the validation error returned by
// HelloRequest.Validate if the designated constraints aren't met.
type HelloRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelloRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelloRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelloRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelloRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelloRequestValidationError) ErrorName() string { return "HelloRequestValidationError" }

// Error satisfies the builtin error interface
func (e HelloRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelloRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelloRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelloRequestValidationError{}

// Validate checks the field values on HelloReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HelloReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelloReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HelloReplyMultiError, or
// nil if none found.
func (m *HelloReply) ValidateAll() error {
	return m.validate(true)
}

func (m *HelloReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return HelloReplyMultiError(errors)
	}

	return nil
}

// HelloReplyMultiError is an error wrapping multiple validation errors
// returned by HelloReply.ValidateAll() if the designated constraints aren't met.
type HelloReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelloReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelloReplyMultiError) AllErrors() []error { return m }

// HelloReplyValidationError is the validation error returned by
// HelloReply.Validate if the designated constraints aren't met.
type HelloReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelloReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelloReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelloReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelloReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelloReplyValidationError) ErrorName() string { return "HelloReplyValidationError" }

// Error satisfies the builtin error interface
func (e HelloReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelloReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelloReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelloReplyValidationError{}
